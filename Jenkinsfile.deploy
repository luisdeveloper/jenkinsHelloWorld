pipeline {
    agent any

    environment {
        JAR_GROUP_ID = "com.github.luisdeveloper"
        JAR_ARTIFACT_ID = "jenkins.helloworld"
        JAR_VERSION = "0.0.1-SNAPSHOT"
        JAR_REPO_URL = "https://maven.pkg.github.com/luisdeveloper/jenkinsHelloWorld"
        LOCAL_JAR_PATH = "${JAR_ARTIFACT_ID}-${JAR_VERSION}.jar"
        DOCKER_IMAGE = "helloworld-app"
        CONTAINER_NAME = "helloworld-container"
    }

    stages {
        stage("Limpiar workspace"){
            steps{
                deleteDir()
            }
        }
        stage('Descargar Dockerfile del repositorio') {
                steps {
                    git branch: 'master', url: 'https://github.com/luisdeveloper/jenkinsHelloWorld.git'
                 }
            }
        stage('Descargar JAR desde GitHub Packages') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-access', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                        sh '''
                            mkdir -p ~/.m2
                            mvn dependency:get \
                          -DgroupId=${JAR_GROUP_ID} \
                          -DartifactId=${JAR_ARTIFACT_ID} \
                          -Dversion=${JAR_VERSION} \
                          -DrepoUrl=${JAR_REPO_URL} \
                          -Dtransitive=false \
                          -U
                          
                          cp ~/.m2/repository/$(echo ${JAR_GROUP_ID} | tr '.' '/')/${JAR_ARTIFACT_ID}/${JAR_VERSION}/${JAR_ARTIFACT_ID}-${JAR_VERSION}.jar app.jar
                        '''
                        
                    }
                }
            }
            
            stage('Construir imagen Docker') {
            steps {
                sh '''            
                    docker build -t ${DOCKER_IMAGE} .
                '''
            }
        }
        stage('Ejecutar contenedor Docker') {
            steps {
                sh '''
                    docker rm -f ${CONTAINER_NAME} || true
                    docker run -d --name ${CONTAINER_NAME} ${DOCKER_IMAGE}
                '''
            }
        }
    }
}
